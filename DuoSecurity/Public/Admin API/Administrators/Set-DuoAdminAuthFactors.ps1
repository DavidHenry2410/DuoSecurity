function Set-DuoAdminAuthFactors {
    <#
    .SYNOPSIS
    Restrict Administrator Authentication Factors
    
    .DESCRIPTION
    Enable or disable secondary authentication methods permitted for administrator log on to the Duo Admin Panel. When no methods are restricted Duo administrators may use any available two-factor method. Any method not explicitly set to true in the POST is disabled. Requires "Grant administrators" API permission.
    
    .PARAMETER HardwareTokenEnabled
    If true, administrators may authenticate to the Duo Admin Panel with an OTP hardware token. If false or not specified, administrators may not use OTP hardware tokens.
    
    .PARAMETER MobileOtpEnabled
    If true, administrators may authenticate to the Duo Admin Panel with a passcode generated by the Duo Mobile app. If false or not specified, administrators may not use Duo Mobile passcodes.
    
    .PARAMETER PushEnabled
    If true, administrators may authenticate to the Duo Admin Panel by approving a push request in the Duo Mobile app. If false or not specified, administrators may not approve login with Duo Push.
    
    .PARAMETER SmsEnabled
    If true, administrators may authenticate to the Duo Admin Panel with a passcode received via SMS. If false or not specified, administrators may not use SMS passcodes.
    
    .PARAMETER VoiceEnabled
    If true, administrators may authenticate to the Duo Admin Panel by approving the request received via phone call. If false or not specified, administrators may not approve login with a phone call.
    
    .PARAMETER YubikeyEnabled
    If true, administrators may authenticate to the Duo Admin Panel with a Yubikey token. If false or not specified, administrators may not use Yubikey tokens.
    
    .EXAMPLE
    Set-DuoAdminAuthFactors -HardwareTokenEnabled -MobileOtpEnabled -PushEnabled -YubiKeyEnabled

    .LINK
    https://duo.com/docs/adminapi#restrict-administrator-authentication-factors

    #>
    [CmdletBinding(SupportsShouldProcess)]
    Param(
        [Parameter()]
        [switch]$HardwareTokenEnabled,

        [Parameter()]
        [switch]$MobileOtpEnabled,
        
        [Parameter()]
        [switch]$PushEnabled,
        
        [Parameter()]
        [switch]$SmsEnabled,

        [Parameter()]
        [switch]$VoiceEnabled,

        [Parameter()]
        [switch]$YubikeyEnabled
    )

    process {
        $Params = @{}

        if ($HardwareTokenEnabled.IsPresent) { $Params.hardware_token_enabled = $HardwareTokenEnabled.IsPresent }
        if ($MobileOtpEnabled.IsPresent) { $Params.mobile_otp_enabled = $MobileOtpEnabled.IsPresent }
        if ($PushEnabled.IsPresent) { $Params.push_enabled = $PushEnabled.IsPresent }
        if ($SmsEnabled.IsPresent) { $Params.sms_enabled = $SmsEnabled.IsPresent }
        if ($VoiceEnabled.IsPresent) { $Params.voice_enabled = $VoiceEnabled.IsPresent }
        if ($YubikeyEnabled.IsPresent) { $Params.yubikey_enabled = $YubikeyEnabled.IsPresent }

        $DuoRequest = @{
            Method = 'POST'
            Path   = '/admin/v1/allowed_auth_methods'
            Params = $Params
        }

        if ($PSCmdlet.ShouldProcess('AuthFactors')) {
            $Request = Invoke-DuoRequest @DuoRequest
            if ($Request.stat -ne 'OK') {
                $Request
            }
            else {
                $Request.response
            }
        }
    }
}
