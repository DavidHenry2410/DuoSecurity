function Update-DuoSetting {
    <#
    .SYNOPSIS
    Modify Settings

    .DESCRIPTION
    Change global Duo settings. Requires "Grant settings" API permission.

    .PARAMETER CallerId
    Automated calls will appear to come from this number. This does not apply to text messages. Customizing this number may cause telephony providers to flag your number as fraudulent and result in failed user authentications.

    .PARAMETER FraudEmail
    The email address to be notified when a user reports a fraudulent authentication attempt or is locked out due to failed authentication attempts, or empty for all administrators will be notified. If fraud_email is set to a specific email address and fraud_email_enabled is set to false, the specific email address value is cleared.

    .PARAMETER FraudEmailEnabled
    Set to true to enable fraudulent authentication notification emails. False disables the fraud email functionality. If fraud_email is set to a specific email address and fraud_email_enabled is set to false, the specific email address value is cleared.

    .PARAMETER HelpdeskBypass
    Grants permission for administrators with the Help Desk role to generate bypass codes for users. The default value allow permits unrestricted generation of bypass codes, limit plus a value for helpdesk_bypass_expiration allows Help Desk admins to generate bypass codes with a preset expirtation, and deny prevents Help Desk admins from generating any bypass codes.

    .PARAMETER HelpdeskBypassExpiration
    Integer specifying a default expiration for bypass codes generated by Help Desk admins, in minutes. If not set, Help Desk admins may change bypass code expiration from the default 60 minutes after creation if helpdesk_bypass is set to allow. If specifying a value, also set helpdesk_bypass to limit.

    .PARAMETER HelpdeskCanSendEnrollEmail
    Permits Help Desk administrators to send or resend enrollment emails to users. Set to true to allow sending of enrollment emails. Default value is false.

    .PARAMETER InactiveUserExpiration
    Users will be automatically deleted if they are inactive (no successful logins) for this number of days. Minimum: 30 Maximum: 365

    .PARAMETER KeypressConfirm
    The key for users to press to authenticate, or empty if any key should be pressed to authenticate. If this is empty, keypress_fraud must be as well.

    .PARAMETER KeypressFraud
    The key for users to report fraud, or empty if any key should be pressed to authenticate. If this is empty, keypress_confirm must be as well.

    .PARAMETER Language
    ets the language used in the browser-based user authentication prompt. One of: "EN", "DE", "FR". Default: "EN"

    .PARAMETER LockoutExpireDuration
    If non-zero, the time in minutes until a locked-out user's status reverts to "Active". If 0, a user remains locked out until their status is manually changed (By an admin or API call). Minimum: 5 Maximum: 30000

    .PARAMETER LockoutThreshold
    The number of consecutive failed authentication attempts before the user's status is set to "Locked Out" and the user is denied access. Default is 10 attempts. Minimum: 1 Maximum: 9999

    .PARAMETER MinimumPasswordLength
    The minimum number of characters that an administrator's Duo Admin Panel password must contain. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: 12. Minimum: 12 Maximum: 100

    .PARAMETER PasswordRequiresLowerAlpha
    If true, administrator passwords will be required to contain a lower case alphabetic character. If false, administrator passwords will not be required to contain a lower case alphabetic character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false.

    .PARAMETER PasswordRequiresNumeric
    If true, administrator passwords will be required to contain a numeric character. If false, administrator passwords will not be required to contain a numeric character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false.

    .PARAMETER PasswordRequiresSpecial
    If true, administrator passwords will be required to contain a special (non-alphanumeric) character. If false, administrator passwords will not be required to contain a special (non-alphanumeric) character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false.

    .PARAMETER PasswordRequiresUpperAlpha
    If true, administrator passwords will be required to contain an upper case alphabetic character. If false, administrator passwords will not be required to contain an upper case alphabetic character. This is only enforced on password creation and reset; existing passwords will not be invalidated. Default: false.

    .PARAMETER SmsBatch
    The number of passcodes to send at one time, up to 10.

    .PARAMETER SmsExpiration
    The time in minutes to expire and invalidate SMS passcodes, or empty if they should not expire.

    .PARAMETER SmsMessage
    Description sent with every batch of SMS passcodes.

    .PARAMETER SmsRefresh
    If 1, a new set of SMS passcodes will automatically be sent after the last one is used. If 0, a new set will not be sent.

    .PARAMETER TelephonyWarningMin
    Configure a alert to be sent when the account has fewer than this many telephony credits remaining.

    .PARAMETER Timezone
    This is the timezone used when displaying timestamps in the Duo Admin Panel. Timezones must be entries in the IANA Time Zone Database, for example, "US/Eastern", "Australia/Darwin", "GMT".

    .PARAMETER UserManagersCanPutUsersInBypass
    Permits User Manager administrators to apply "Bypass" status to users. Set to false to prevent User Managers from applying "Bypass" status. Default value is true.

    .PARAMETER UserTelephonyCostMax
    The maximum number of telephony credits a user may consume in a single authentication event. This excludes Duo administrators authenticating to the Duo administration panel. If you know the countries from which your users expect to authenticate with phone callback we recommend adjusting this down from the default to match the most expensive expected country to help avoid misuse, using the values from the Telephony Credits documentation. Default: 20.

    .EXAMPLE
    Update-DuoSetting -FraudEmail helpdesk@domain.com

    .LINK
    https://duo.com/docs/adminapi#modify-settings

    .INPUTS
    None

    .OUTPUTS
    PSCustomObject. Duo Settings object

    .NOTES

    #>
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingUsernameAndPasswordParams', '')]
    [CmdletBinding(SupportsShouldProcess)]
    Param(
        [Parameter()]
        [string]$CallerId,

        [Parameter()]
        [string]$FraudEmail,

        [Parameter()]
        [switch]$FraudEmailEnabled,

        [Parameter()]
        [ValidateSet('Allow', 'Limit', 'Deny')]
        [string]$HelpdeskBypass,

        [Parameter()]
        [int]$HelpdeskBypassExpiration,

        [Parameter()]
        [switch]$HelpdeskCanSendEnrollEmail,

        [Parameter()]
        [ValidateRange(30, 365)]
        [int]$InactiveUserExpiration,

        [Parameter()]
        [string]$KeypressConfirm,

        [Parameter()]
        [string]$KeypressFraud,

        [Parameter()]
        [ValidateSet('EN', 'DE', 'FR')]
        [string]$Language,

        [Parameter()]
        [ValidateRange(5, 30000)]
        [int]$LockoutExpireDuration,

        [Parameter()]
        [ValidateRange(1, 9999)]
        [int]$LockoutThreshold,

        [Parameter()]
        [ValidateRange(12, 100)]
        [int]$MinimumPasswordLength,

        [Parameter()]
        [switch]$PasswordRequiresLowerAlpha,

        [Parameter()]
        [switch]$PasswordRequiresNumeric,

        [Parameter()]
        [switch]$PasswordRequiresSpecial,

        [Parameter()]
        [switch]$PasswordRequiresUpperAlpha,

        [Parameter()]
        [ValidateRange(1, 10)]
        [int]$SmsBatch,

        [Parameter()]
        [int]$SmsExpiration,

        [Parameter()]
        [string]$SmsMessage,

        [Parameter()]
        [ValidateRange(0, 1)]
        [int]$SmsRefresh,

        [Parameter()]
        [int]$TelephonyWarningMin,

        [Parameter()]
        [string]$Timezone,

        [Parameter()]
        [switch]$UserManagersCanPutUsersInBypass,

        [Parameter()]
        [int]$UserTelephonyCostMax
    )

    $Params = @{}

    if ($CallerId) { $Params.caller_id = $CallerId }
    if ($FraudEmail) { $Params.fraud_email = $FraudEmail }
    if ($FraudEmailEnabled.IsPresent) { $Params.fraud_email_enabled = $FraudEmailEnabled.IsPresent }
    if ($HelpdeskBypass) { $Params.helpdesk_bypass = $HelpdeskBypass.ToLower() }
    if ($HelpdeskBypassExpiration) { $Params.helpdesk_bypass_expiration = $HelpdeskBypassExpiration }
    if ($HelpdeskCanSendEnrollEmail.IsPresent) { $Params.helpdesk_can_send_enroll_email = $HelpdeskCanSendEnrollEmail.IsPresent }
    if ($HelpdeskMessage) { $Params.helpdesk_message = $HelpdeskMessage }
    if ($InactiveUserExpiration) { $Params.inactive_user_expiration = $InactiveUserExpiration }
    if ($KeypressConfirm) { $Params.keypress_confirm = $KeypressConfirm }
    if ($KeypressFraud) { $Params.keypress_fraud = $KeypressFraud }
    if ($Language) { $Params.language = $Language }
    if ($LockoutExpireDuration) { $Params.lockout_expire_duration = $LockoutExpireDuration }
    if ($LockoutThreshold) { $Params.lockout_threshold = $LockoutThreshold }
    if ($MinimumPasswordLength) { $Params.minimum_password_length = $MinimumPasswordLength }
    if ($PasswordRequiresLowerAlpha.IsPresent) { $Params.password_requires_lower_alpha = $PasswordRequiresLowerAlpha.IsPresent }
    if ($PasswordRequiresNumeric.IsPresent) { $Params.password_requires_numeric = $PasswordRequiresNumeric.IsPresent }
    if ($PasswordRequiresSpecial.IsPresent) { $Params.password_requires_special = $PasswordRequiresSpecial.IsPresent }
    if ($PasswordRequiresUpperAlpha.IsPresent) { $Params.password_requires_upper_alpha = $PasswordRequiresUpperAlpha.IsPresent }
    if ($SmsBatch) { $Params.sms_batch = $SmsBatch }
    if ($SmsExpiration) { $Params.sms_expiration = $SmsExpiration }
    if ($SmsMessage) { $Params.sms_message = $SmsMessage }
    if ($SmsRefresh) { $Params.sms_refresh = $SmsRefresh }
    if ($TelephonyWarningMin) { $Params.telephony_warning_min = $TelephonyWarningMin }
    if ($Timezone) { $Params.timezone = $Timezone }
    if ($UserManagersCanPutUsersInBypass.IsPresent) { $Params.user_managers_can_put_users_in_bypass = $UserManagersCanPutUsersInBypass }
    if ($UserTelephonyCostMax) { $Params.user_telephony_cost_max = $UserTelephonyCostMax }

    $DuoRequest = @{
        Method = 'POST'
        Path   = '/admin/v1/settings'
        Params = $Params
    }

    if ($PSCmdlet.ShouldProcess('Duo Account Settings')) {
        $Request = Invoke-DuoRequest @DuoRequest
        if ($Request.stat -ne 'OK') {
            $Request
        } else {
            $Request.response
        }
    }
}

Set-Alias -Name Update-DuoSettings -Value Update-DuoSetting
