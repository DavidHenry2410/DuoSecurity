function Send-DuoAuth {
    <#
    .SYNOPSIS
    Duo Auth

    .DESCRIPTION
    The /auth endpoint performs second-factor authentication for a user by sending a push notification to the user's smartphone app, verifying a passcode, or placing a phone call. It is also used to send the user a new batch of passcodes via SMS.

    .PARAMETER UserId
    Permanent, unique identifier for the user as generated by Duo upon user creation (e.g. DUYHV6TJBC3O4RITS1WC).

    .PARAMETER Username
    Unique identifier for the user that is commonly specified by your application during user creation (e.g. user@domain.com). This value may also represent a username alias assigned to a user.

    .PARAMETER Factor
    Factor to use for authentication. Currently, the following choices are supported:

    | Value | Meaning |
    |-------|---------|
    | auto     | Use the out-of-band factor (push or phone) recommended by Duo as the best for the user's devices.
    | push     | Authenticate the user with Duo Push.
    | passcode | Authenticate the user with a passcode (from Duo Mobile, SMS, hardware token, or bypass code).
    | sms	   | Send a new batch of SMS passcodes to the user. Note that this will not actually authenticate the user (it will automatically return "deny" Thus, if the user elects to do this then you should re-prompt to authenticate after the call has completed.
    | phone    | Authenticate the user with phone callback.

    .PARAMETER IpAddr
    The IP address of the user to be authenticated, in dotted quad format. This will cause an "allow" response to be sent if appropriate for requests from a trusted network.

    .PARAMETER Hostname
    The host name of the device accessing the application.

    .PARAMETER Async
    If this parameter is not provided, then the /auth endpoint will only return a response when the authentication process has completed. If, however, your application provides this parameter with a value of "1", then /auth will immediately return a transaction ID, and your application will need to subsequently query the /auth_status endpoint to get the status (and, eventually, result) of the authentication process.

    If you enable async, then your application will be able to retrieve real-time status updates from the authentication process, rather than receiving no information until the process is complete.

    .PARAMETER Device
    ID of the device. This device must have the "push","phone" or "sms" capability.

    Default: auto

    .PARAMETER Type
    This string is displayed in the Duo Mobile app push notification and UI. You may wish to specify some alternate phrase for this parameter.

    The default English string in Duo Mobile v4 is "Verify your identity" and "Are you logging in to" followed by the application's name in the push request notification text, and "Are you logging in to" followed by the application's name in the request details screen as shown in Duo Mobile. With type specified, the notification text changes to "Verify request" and shows your customized string followed by a colon and the application's name, and the request details screen also shows your customized string and the application's name. Duo Mobile shows the equivalent localization in the languagues supported by the app, but does not attempt to localize your custom string or support multiple string values (for different languages).

    .PARAMETER DisplayUsername
    String to display in Duo Mobile in place of the user's Duo username.

    .PARAMETER Passcode
    Passcode entered by the user.

    .PARAMETER PushInfo
    A set of URL-encoded key/value pairs with additional contextual information associated with this authentication attempt. The Duo Mobile app will display this information to the user.

    For example: from=login%20portal&domain=example.com

    The URL-encoded string's total length must be less than 20,000 bytes.

    .EXAMPLE
    New-DuoAuth -Username blumbergh -Factor Auto -Async

    .LINK
    https://duo.com/docs/authapi#/auth

    .NOTES
    Exactly one of user_id or username must be specified.

    The push_info URL-encoded string's total length must be less than 20,000 bytes.
    #>
    [CmdletBinding(DefaultParameterSetName = 'Username')]
    Param(
        [Parameter(Mandatory = $true, ParameterSetName = 'UserId')]
        [Alias('user_id')]
        [string]$UserId,

        [Parameter(Mandatory = $true, ParameterSetName = 'Username')]
        [string]$Username,

        [Parameter()]
        [ValidateSet('Auto', 'Push', 'Passcode', 'Sms', 'Phone')]
        [string]$Factor = 'Auto',

        [Parameter()]
        [string]$IpAddr,

        [Parameter()]
        [string]$Hostname,

        [Parameter()]
        [switch]$Async,

        [Parameter()]
        [string]$Device = 'auto',

        [Parameter()]
        [string]$Type,

        [Parameter()]
        [string]$DisplayUsername,

        [Parameter()]
        [switch]$Passcode,

        [Parameter()]
        [hashtable]$PushInfo
    )

    process {
        $Params = [ordered]@{
            factor = $Factor.ToLower()
        }
        if ($UserId) { $Params.user_id = $UserId }
        if ($Username) { $Params.username = $Username }
        if ($IpAddr) { $Params.ipaddr = $IpAddr }
        if ($Hostname) { $Params.hostname = $Hostname }
        if ($Async.IsPresent) { $Params.async = 1 }
        if ($Factor -eq 'Passcode') {
            if ($Passcode) { $Params.passcode = $Passcode }
        }

        else {
            if ($Device) { $Params.device = $Device }

            if ($Factor -eq 'Push') {
                if ($Type) { $Params.type = $Type }
                if ($DisplayUsername) { $Params.display_username = $DisplayUsername }
            }
        }

        if ($PushInfo) {
            $PushInfoCollection = [System.Web.HttpUtility]::ParseQueryString([String]::Empty)
            foreach ($Item in $PushInfo.GetEnumerator()) {
                $PushInfoCollection.Add($Item.Key, $Item.Value)
            }
            $Params.pushinfo = [System.Web.HttpUtility]::UrlDecode($PushInfoCollection.ToString())
        }

        $DuoRequest = @{
            Method = 'POST'
            Path   = '/auth/v2/auth'
            Params = $Params
        }

        $Response = Invoke-DuoRequest @DuoRequest
        if ($Response.stat -eq 'OK') {
            $Response.response
        } else {
            $Response
        }
    }
}
